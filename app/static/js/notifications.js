document.addEventListener('DOMContentLoaded', function () {
    // Connect to the Socket.IO server.
    // The URL should match your server configuration.
    // If running on the same host and port, '/" is usually fine.
    var socket = io();

    // Get the notification badge element
    var notificationBadge = document.getElementById('notification-count-badge');
    var currentNotificationCount = 0;

    // Function to update the badge
    function updateNotificationBadge(count) {
        if (notificationBadge) {
            notificationBadge.textContent = count;
            if (count > 0) {
                notificationBadge.style.display = ''; // Show badge if count > 0
            } else {
                notificationBadge.style.display = 'none'; // Hide badge if count is 0
            }
        }
    }

    // Initialize badge (e.g., fetch initial unread count via an API endpoint, or start at 0)
    // For simplicity, we'll start at 0 and only increment with new real-time notifications.
    // A more robust solution would fetch the current unread count on page load.
    if (notificationBadge) {
        let initialCount = parseInt(notificationBadge.textContent);
        if (!isNaN(initialCount)) {
            currentNotificationCount = initialCount;
        } else {
            // Fallback if textContent is not a number for some reason, though it should be.
            currentNotificationCount = 0;
        }
        updateNotificationBadge(currentNotificationCount);
    }


    // Listen for 'new_notification' events from the server
    socket.on('new_notification', function (data) {
        console.log('New notification received:', data);
        currentNotificationCount++;
        updateNotificationBadge(currentNotificationCount);

        if (window.location.pathname === '/notifications') {
            const notificationsList = document.querySelector('ul.list-group');
            const noNotificationsP = document.querySelector('.container p'); // Assuming this is the "You have no notifications." paragraph

            if (notificationsList) {
                const newLi = document.createElement('li');
                newLi.classList.add('list-group-item', 'list-group-item-info'); // New notifications are unread

                let contentHTML = '';
                const now = new Date();
                const timestamp = now.toISOString().slice(0, 10) + ' ' + now.toISOString().slice(11, 19); // Approximation of Python's strftime

                // Base URLs - these would ideally be generated by url_for if JS could call it,
                // but for now, we construct them manually.
                // Ensure these base paths are correct as per your Flask routing.
                const userProfileBaseUrl = '/user/';
                const postBaseUrl = '/user/'; // For post author profile
                // The link to a post itself is more complex as it involves author's profile then #post-id
                // Example: /user/post_author_username#post-data.post_id

                if (data.type === 'like') {
                    contentHTML = `
                        <a href="${userProfileBaseUrl}${data.actor_username}">${data.actor_username}</a>
                        liked your
                        <a href="${postBaseUrl}${data.post_author_username}#post-${data.post_id}">post</a>.
                    `;
                } else if (data.type === 'comment') {
                    // Ensure data.comment_body is present and correctly truncated from the server
                    contentHTML = `
                        <a href="${userProfileBaseUrl}${data.actor_username}">${data.actor_username}</a>
                        commented on your
                        <a href="${postBaseUrl}${data.post_author_username}#post-${data.post_id}">post</a>:
                        <em>"${data.comment_body}"</em>
                    `;
                } else if (data.type === 'follow') {
                    contentHTML = `
                        <a href="${userProfileBaseUrl}${data.actor_username}">${data.actor_username}</a>
                        started following you.
                    `;
                } else if (data.type === 'mention') {
                    let mentionInType = '';
                    if (data.comment_id) { // Mention in a comment
                        mentionInType = `a <a href="${data.url || '#'}">comment</a> on ${data.post_author_username}'s post`;
                    } else { // Mention in a post
                        mentionInType = `a <a href="${data.url || '#'}">post</a>`;
                    }
                    contentHTML = `
                        <a href="${userProfileBaseUrl}${data.actor_username}">${data.actor_username}</a>
                        mentioned you in ${mentionInType}:
                        <em>"${data.content_preview}"</em>
                    `;
                } else if (data.type === 'new_chat_message') {
                    // Ensure data.conversation_id is present
                    contentHTML = `
                        <a href="${userProfileBaseUrl}${data.actor_username}">${data.actor_username}</a>
                        sent you a new message.
                        <a href="/chat/${data.conversation_id}">View chat</a>.
                    `;
                } else if (data.type && data.type.startsWith('like_milestone_')) {
                    // The message is pre-formatted from the backend for socket events
                    contentHTML = `
                        <a href="${userProfileBaseUrl}${data.actor_username}">${data.actor_username}</a>
                        helped your <a href="${postBaseUrl}${data.post_author_username}#post-${data.post_id}">post</a>
                        reach ${data.milestone_count} likes!
                    `;
                } else {
                    contentHTML = 'A new notification.'; // Generic fallback
                }

                newLi.innerHTML = contentHTML + `<br><small class="text-muted">${timestamp} UTC</small>`;

                // Prepend to list
                notificationsList.insertBefore(newLi, notificationsList.firstChild);

                // Hide "no notifications" message if it's visible
                if (noNotificationsP && noNotificationsP.textContent.trim() === "You have no notifications.") {
                    noNotificationsP.style.display = 'none';
                }
            }
            // Optional: Prevent default browser notification if on this page,
            // by returning early or setting a flag that the browser notification block checks.
            // For now, it will show both, which might be okay.
        }

        // Optional: Display a browser notification (requires user permission)
        if (Notification.permission === "granted") {
            let browserNotification;
            if (data.type === 'new_chat_message' && data.conversation_id) {
                browserNotification = new Notification("New Chat Message", {
                    body: data.message || `New message from ${data.actor_username}`,
                    // icon: "..." // Optional: chat icon
                });
                browserNotification.onclick = function() {
                    window.location.href = '/chat/' + data.conversation_id;
                };
            } else if (data.type && data.type.startsWith('like_milestone_')) {
                browserNotification = new Notification("Post Milestone Reached!", {
                    body: data.message, // e.g., "Your post '...' reached 10 likes!"
                    // icon: "..." // Optional: milestone icon
                });
                browserNotification.onclick = function() {
                    // Link to the post itself
                    window.location.href = `${postBaseUrl}${data.post_author_username}#post-${data.post_id}`;
                };
            } else if (data.type === 'mention') {
                browserNotification = new Notification("New Mention!", {
                    body: data.message, // e.g., "user mentioned you in a post/comment."
                    // icon: "..." // Optional: mention icon
                });
                browserNotification.onclick = function() {
                    // data.url should be the direct link to the post or comment anchor
                    window.location.href = data.url || "/notifications";
                };
            } else { // For other types of notifications like 'like', 'comment', 'follow'
                browserNotification = new Notification("New Notification", {
                    body: data.message || "You have a new notification."
                    // icon: "..." // Optional: general notification icon
                });
                browserNotification.onclick = function() {
                    window.location.href = "/notifications";
                };
            }
        } else if (Notification.permission !== "denied") {
            // Request permission if not already granted or denied
            Notification.requestPermission().then(function (permission) {
                if (permission === "granted") {
                    let browserNotification;
                    // Duplicate the logic from above for when permission is granted immediately
                    if (data.type === 'new_chat_message' && data.conversation_id) {
                        browserNotification = new Notification("New Chat Message", {
                            body: data.message || `New message from ${data.actor_username}`,
                            // icon: "..."
                        });
                        browserNotification.onclick = function() {
                            window.location.href = '/chat/' + data.conversation_id;
                        };
                    } else if (data.type && data.type.startsWith('like_milestone_')) {
                        browserNotification = new Notification("Post Milestone Reached!", {
                            body: data.message,
                            // icon: "..." // Optional: milestone icon
                        });
                        browserNotification.onclick = function() {
                            window.location.href = `${postBaseUrl}${data.post_author_username}#post-${data.post_id}`;
                        };
                    } else if (data.type === 'mention') {
                        browserNotification = new Notification("New Mention!", {
                            body: data.message,
                            // icon: "..." // Optional: mention icon
                        });
                        browserNotification.onclick = function() {
                            window.location.href = data.url || "/notifications";
                        };
                    } else {
                        browserNotification = new Notification("New Notification", {
                            body: data.message || "You have a new notification."
                            // icon: "..."
                        });
                        browserNotification.onclick = function() {
                            window.location.href = "/notifications";
                        };
                    }
                }
            });
        }

        // Optional: If on the notifications page, dynamically add to list (more complex)
        // if (window.location.pathname === '/notifications') {
        //     // Code to prepend the new notification to the list
        // }
    });

    // Handle connection events (optional, for debugging)
    socket.on('connect', function() {
        console.log('Socket.IO connected');
    });

    socket.on('disconnect', function() {
        console.log('Socket.IO disconnected');
    });

    socket.on('connect_error', (err) => {
        console.error('Socket.IO connection error:', err);
    });

    socket.on('notifications_cleared', function(data) {
        console.log('Notifications cleared event received:', data.message);
        currentNotificationCount = 0;
        updateNotificationBadge(currentNotificationCount);
    });

});
